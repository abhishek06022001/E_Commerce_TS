const { createStore, applyMiddleware } = Redux;
const thunk = ReduxThunk.default;

//--- Actions and action creator
const QUOTE_REQUESTED = "QUOTE_REQUESTED";
const QUOTE_RECEIVED = "QUOTE_RECEIVED";
const QUOTE_FAILED = "QUOTE_FAILED";

function getQuoteAction() {
  return function(dispatch) {
    dispatch({
      type: QUOTE_REQUESTED,
    });
    
    fetch("https://ron-swanson-quotes.herokuapp.com/v2/quotes")
      .then(response => response.json())
      .then(data => dispatch({
        type: QUOTE_RECEIVED,
        payload: data
       }))
      .catch(error => dispatch({
        type: QUOTE_FAILED,
        payload: error
       }));
  }
}

//--- Reducer
const initialState = { data: [], status:"" };

function quotes(state = initialState, action) {
  switch (action.type) {
    case QUOTE_REQUESTED:
      state = Object.assign({}, state, {status: "waiting"});
      break;
    case QUOTE_RECEIVED:
      state = Object.assign({}, state, {data: [...action.payload], status: "received"});
      break;
    case QUOTE_FAILED:
      state = Object.assign({}, state, {status: "failed", error: action.payload});
      break;
  }
  
  return state;
}

//--- Store
let store = createStore(quotes, initialState, applyMiddleware(thunk));

//--- UI management
const quoteElement = document.getElementById("quote");

store.dispatch(getQuoteAction());

store.subscribe(() => {
  const state = store.getState();
  
  if (state.status == "waiting") {
    quoteElement.innerHTML = "Loading...";
  }
  
  if (state.status == "received") {
    quoteElement.innerHTML = state.data[0];
  }
});